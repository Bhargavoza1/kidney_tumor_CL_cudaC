name: CUDA Build

on:
  workflow_dispatch:  # Manually trigger the workflow
#on:
#  push:
#    branches:
#      - main
#  pull_request:
#    branches:
#      - main
permissions:
      id-token: write
      contents: read
jobs:
  build:
    runs-on: ubuntu-latest

    #services:
      #nn_backend:
      #  image: nvidia/cuda:12.3.2-devel-ubuntu22.04
      #  ports:
      #    - "8080:8080"
      #  options: --privileged  # Required for GPU access
      #  env:
      #    NVIDIA_VISIBLE_DEVICES: all

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v2
        with: 
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: test1repo.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

     # - name: Build and deploy nn_backend
     #   run: | 
     #     docker build ./NN_backend -t test1repo.azurecr.io/nn_backend:${GITHUB_RUN_NUMBER}
     #     docker push test1repo.azurecr.io/nn_backend:${GITHUB_RUN_NUMBER}

      - name: Build and deploy react_app
        run: |
          docker build ./react_app -t test1repo.azurecr.io/react_app:${GITHUB_RUN_NUMBER}
        #  docker push test1repo.azurecr.io/react_app:${GITHUB_RUN_NUMBER}
 
 
      - name: Check if AKS Cluster exists
        uses: azure/CLI@v2
        with:
          azcliversion: latest
          inlineScript: |
            result=$(az aks show --resource-group my_test --name myAKSCluster --query 'id' 2>/dev/null)
            if [[ -z "$result" || "$result" == "null" ]]; then
              echo "::set-output name=cluster_exists::false"
            else
              echo "::set-output name=cluster_exists::true"
            fi


   

      - name: Create AKS Cluster
        if: steps.Check_if_AKS_Cluster_exists.outputs.cluster_exists == 'false'
        run: az aks create --resource-group my_test --name myAKSCluster --node-count 1 --enable-addons monitoring --generate-ssh-keys

      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group my_test --name myAKSCluster --overwrite-existing
      
      - name: Replace placeholders in Kubernetes YAML files
        run: |
          sed -i "s/\${GITHUB_RUN_NUMBER}/${GITHUB_RUN_NUMBER}/g" ./k82/react_app_Deployment.yaml 

      - name: Deploy to AKS
        run: kubectl apply -f ./k82/react_app_Deployment.yaml -f ./k82/react_app_Service.yaml